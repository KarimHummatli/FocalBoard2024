// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/templates.json (34.109kB)

package initializations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x4b\x8f\x24\xc7\x71\xbe\xef\xaf\x28\x0f\x0f\x06\x0c\x06\x9c\x19\x19\x99\x19\xc9\xdb\x92\x2b\x51\x0b\x50\xe4\x4a\xbb\xb2\x6c\x58\x82\x90\x8f\xc8\xd9\x16\x7b\xba\x07\xdd\x35\xbb\x5a\x08\x3a\xf9\xaa\x97\x05\x01\x82\x4d\xc1\x2b\x58\xb0\xa1\x9b\x65\xd8\x07\xc3\x86\x2f\xfa\x29\xfa\x03\xde\x9f\x60\x54\xcf\x3e\x7a\x66\xbb\x8a\x55\xf3\x1e\x61\x41\x82\x60\x77\x3d\x3a\xaa\xf2\x8b\x88\x2f\x22\x23\x62\x7e\x78\xa7\x69\xf6\x9e\xc8\x6a\x3d\x5b\x2e\xf6\x3e\x68\xf4\xfb\xdd\xe7\x12\x5b\xe9\x3e\x38\xc5\x06\xad\x0a\x0a\xf5\xf1\x81\xb4\x8c\xab\xb2\xde\xfb\xa0\xf9\xdb\x3b\x4d\xd3\x34\x3f\xdc\xfc\xb7\x69\xf6\x66\x65\xef\x83\x66\x0f\x53\xf2\x25\x9b\x02\xd9\xb8\x08\x24\x4a\x01\x8b\xaa\x10\x5d\x31\x3a\x66\x65\x4d\xf6\x7b\xef\xbf\xba\xe6\x30\xae\x64\xd1\xde\xdf\x5c\xf9\xe6\xdb\xd5\x72\xf9\xf2\xbb\x69\x77\x5b\xe7\xc7\x72\x10\x5f\x3d\xc1\xe6\xab\xf6\xd9\x61\xf7\x14\xc7\x42\xbf\x39\xb3\x9d\xb5\xf3\xcd\xf7\x0f\x56\xcb\xef\x4b\x6e\x9b\x47\x71\xfd\xf9\xfa\xcd\xf1\x1c\x57\xe5\xc1\x6a\x79\x28\xab\x76\x26\x6f\x9e\x75\xfb\x79\xb7\x9e\x39\x06\x8f\x25\xfb\x08\xb6\x52\x06\xb2\x05\x81\x15\x11\x70\x46\xce\x2e\x78\xed\xab\x7e\x7d\xef\xcd\x75\x8b\x78\xb0\xf9\xf9\x87\x6d\x6c\x8f\xd6\x27\x8f\x2d\x0f\xdb\xd9\x72\x71\xf2\x47\x4f\xff\xf0\xb1\x90\xcb\xf9\x72\xd5\xdd\xe5\x70\xb5\x3c\xfc\xa8\xfb\x70\x4f\x6a\x3c\x9a\xb7\x27\xee\xb7\x25\x27\x91\x97\x5c\x49\x43\xa9\xb6\x00\xa1\x68\xe0\x10\x13\x78\x4d\xe2\xbc\x95\xe8\xbc\x7e\xfb\xda\x27\x71\x7e\xb4\x11\xf6\x53\xf9\x41\xdb\x7c\xeb\x70\xef\xc4\x09\x3f\x7a\x7f\xaa\x90\x7f\x23\xf3\xf9\xf2\x69\x9f\x8c\xa5\xf8\x64\xa2\x0f\x20\x09\x0b\x50\x30\x16\x38\xd8\x00\x18\x94\x0d\xb1\x04\xeb\x4d\x1c\x90\xf1\xfe\xa2\x79\xb0\x5a\xee\xaf\x64\xbd\x3e\xaf\x9c\x1f\xaf\x44\x16\x03\x62\xc6\x84\xa9\x40\xc8\xde\x01\x15\x09\xc0\xaa\x32\x58\xed\x45\xbb\x5a\x34\xdb\xa1\x57\xf9\xd1\xf2\xe0\x70\x2e\xad\x94\x3f\xfc\xe6\x0f\xbf\x79\xf1\xfc\x1f\x7e\x7c\x5e\x61\x3f\x5c\x2d\x9f\xf6\x0a\xeb\xac\xd8\x1c\xa2\x01\x93\x62\x04\xaa\xda\x03\x6b\x97\x01\xbb\x47\x88\xde\x14\x29\x61\x40\xd8\xbb\xab\xfc\x78\xf6\x44\xca\x29\x19\xb7\x3e\x7d\xf7\x04\x80\x5f\xe9\xdc\x5a\xe6\x92\xdb\x37\x57\x6d\x3d\xd5\x0e\x25\x2a\xa6\x38\xc6\x54\x41\x94\x27\xa0\x50\x02\x70\xa9\x16\xbc\x41\x15\x50\x67\x2c\x68\x76\x2b\xd1\x83\xd5\x6c\xb9\x9a\xb5\xcf\x2e\x4c\x8d\xbe\x29\xa5\x77\xdd\x4d\xaa\xc9\xaa\x0a\xd5\xba\x00\x94\x62\x01\x8e\x26\x42\x29\xda\x66\x53\x9d\xd2\x6a\x68\xdd\xbf\x36\xdb\x7f\xdc\xbc\x78\xfe\xcb\x7f\xb9\x5c\x25\x62\x5f\x6d\xf0\x4c\x90\xd8\x06\xa0\x8c\x04\x2c\x49\x40\xfb\xec\x9d\x13\xc5\xba\xec\x78\xc2\xd7\x52\x7e\x5d\xca\xec\xe8\xe0\xfc\xfa\x13\x9f\xf5\x09\x18\x38\x5a\xef\xd0\x83\xaa\x9d\xfa\x78\x5d\x80\xad\x2a\x10\x74\x35\x52\x42\x2d\xa8\xcd\x80\x80\x9f\x2c\x9f\x5e\x2e\x18\x31\xda\x12\x0d\x2a\xf0\xc6\x66\x20\x15\x0c\xb0\x67\xdf\xad\xba\x68\x9b\x4b\x95\x53\x10\x79\x0d\xc6\x7b\xb1\x95\xe6\xa3\x95\xc4\xf6\xf4\x19\x5b\x80\xdc\x2d\x62\x3e\xbe\xea\xd1\xec\x40\xb6\xe4\xbc\x73\xea\xa9\xf6\x8a\xac\xf3\x6a\xb6\xb9\xd9\x49\xb7\x39\xcb\xc7\xdf\xbc\x78\xfe\xd3\x7f\xdb\xfa\x76\xfd\x48\x0e\x0e\xe7\xc7\xde\xbc\x5d\x1d\xc9\x1b\x27\xb7\xf9\xbd\xbb\xed\xb1\x97\xf7\x0e\xb5\x77\xda\x1a\x7c\x7d\xc2\xd1\x61\x39\x79\x02\x22\x23\x05\xb7\x25\x4a\x67\xc4\x36\x27\xa8\x3b\x5b\x6f\xf5\x14\x27\x30\x35\x5a\x54\x92\xc0\xa8\x5c\x80\xd8\x22\x30\x86\x08\x29\x9a\x94\xbd\x30\x0b\xba\xf1\x9c\x60\xda\xdd\xce\xc0\x09\xbe\x2e\xd2\xce\x16\xfb\xcd\xa7\xcb\x56\xce\xcc\x09\x7c\x46\x8d\xe2\x19\x82\x21\x0b\x94\x9d\x02\xd6\xc9\x82\x4a\x4a\x8c\xcf\x42\xce\xd4\xdd\x08\x7a\xd4\x89\x77\x51\xa6\x6c\xd8\x4e\x18\x5d\xa2\x55\x39\x42\xd5\x31\x00\x15\xd4\xc0\xce\x38\xd0\x1d\xe9\x62\x9f\x75\xc4\x21\x35\xbc\x5b\x9a\xaf\x2d\xf3\xb9\x5d\x57\x77\xb7\x3e\x73\x2b\xd5\x19\xed\x33\x48\xd6\x1a\x48\xab\xce\xdc\xba\x04\x12\xc9\x69\x83\xaa\x9a\x80\x03\x02\x3e\x6c\xe3\xa2\x1c\x9d\x9b\xb1\x3c\x38\x5a\x1d\xce\x7b\x65\xf4\x4a\x55\x36\x95\xc1\x45\xd2\x40\x2e\x17\x60\x2f\x08\xd6\x88\x2a\x2a\x69\xcc\x5b\x1c\xf5\x6d\x19\xbf\x2d\xf2\xf9\xfc\x59\xf3\xf0\xd9\xe2\xf4\x9b\xbc\x60\x9b\xa6\x4d\x41\x13\x28\x82\x24\x2b\x40\x15\xb1\x23\xa8\x08\xce\x6a\x2b\x99\x74\xa6\x48\x3d\x2c\xf5\xe8\xe0\x20\xae\xfa\xfd\xeb\x6e\xe9\x5a\xf9\x41\x7b\x4e\x3b\xf6\xab\x5f\xfc\xdf\x7f\xfd\xec\x0c\xa6\xcc\x6b\xaf\x9d\x0b\xce\xf5\x99\x32\xaf\xbd\x71\x26\xb0\x9e\x6a\xca\x5c\x12\x13\x72\xd6\x50\xb1\x73\x0c\x3e\x55\xe0\x42\x01\xaa\x13\x8a\xac\x72\x65\x8f\xe3\x4d\xd9\xb4\xbb\x9d\x25\xbc\x91\xd5\x7a\xb9\x88\xf3\xe6\xe3\x65\x9c\x9f\x3d\xbe\xa9\xae\xe6\x94\x18\x72\xb4\x0e\x28\x79\x03\x6c\x3a\x03\xec\xc9\xf8\x14\xa2\x73\xbe\xc7\x1b\x5e\x70\x7c\x33\x40\xcc\x52\xb5\x98\xaa\x38\x88\xb9\x8b\xc1\x02\x31\x30\xea\xda\x09\x1a\xa3\xce\x3e\x29\x1a\x8a\x1b\x1e\x2d\x9b\x7b\xcb\xcb\x25\x65\xde\x67\x6b\x42\xac\x60\x54\xc8\x40\x25\x69\x60\x83\x01\x0a\x2a\xa9\x5e\x82\xc4\x3c\x44\xca\xee\x2d\x67\x8b\xfd\x4b\x8d\x69\x02\xa7\x22\xb1\x23\x65\x39\x0b\x50\x2e\x02\x5c\xb2\x03\xd4\x18\x4b\x31\x4e\xdc\x60\xe8\x75\x6f\xb9\x90\x66\x47\x2c\x73\xd1\x71\x42\xf0\x68\x8b\x26\x28\x36\x32\x10\x8b\x05\x2e\xa2\xc1\x55\xce\x4a\x51\x0c\x8e\xd5\x6e\x30\x7e\x14\x5b\xd9\x5f\x0e\xd8\xb1\x8b\xf5\x0b\x06\xc9\x46\x83\x05\xaa\x63\x06\x72\x26\x01\xfb\xda\x31\x71\xaf\x09\xb3\x4e\x26\x0c\xf9\x85\x4f\x66\x55\x9a\x87\x9f\xcf\xe6\xf3\xcb\x8d\x64\x59\x25\xd9\x44\x83\x35\xfb\x08\x14\x90\x81\x89\x03\x70\x52\xa8\x59\x55\x0a\x96\x06\xc4\xfc\xea\x6c\x11\x17\x59\xce\x2b\xe2\x67\xab\xb8\xd8\xef\x7d\x95\xb5\x26\x53\x83\xd5\x90\xc8\x57\x20\xdd\xbd\xca\xaa\x0b\xa0\x61\xe7\x9c\x47\x56\x8a\x87\xa2\x2e\x89\xf3\xf6\xf1\x25\xc3\xd2\x25\x8d\x14\x12\xa4\xac\x19\xc8\xd6\x0c\xcc\x41\x20\x49\x26\xae\x59\x58\x49\x0f\xdf\xbb\x77\x24\x4d\x17\x35\x5c\x55\x16\x28\x44\x15\x94\x18\x03\x49\x6b\x05\x84\x8e\x81\x83\x0a\xa0\x0d\x66\xab\x14\xe6\xa0\x76\x2c\xc4\xeb\x97\xf9\x0d\x7d\xde\xb5\xfe\x12\xf9\x54\x64\x0c\xde\x57\xe8\x0c\x3a\x90\xf5\x09\x98\x74\x02\xc1\xe4\xab\x77\x35\x59\xb4\x43\xf2\xe1\x25\xcb\xe7\xc4\x6b\x13\x84\xc0\x1a\xdb\xe9\x75\x4a\xc0\x59\x69\xf0\x49\x61\x88\xd6\x27\x56\x43\x66\xf2\x1b\xe6\x92\xe5\x2b\xd6\x78\x9d\x9d\x01\xe7\xba\xf7\x47\xdd\xfa\x7a\xc3\x90\xa9\x64\x4a\x12\x89\x69\x88\xd4\x7f\x83\xce\xad\x28\xd3\xa9\xde\x1f\xbf\xf8\xfd\x59\x99\x9e\x45\xcd\xe8\x55\x3f\xd3\xb3\x6e\xf3\xef\x54\xa6\x17\x0c\xd5\x80\xc9\x43\xa8\x45\x03\xa5\x60\x80\x6b\xd6\xa0\x88\x62\x2a\x51\x72\xce\x61\x3c\xd3\x9b\x76\xb7\xf3\x30\xbd\x73\x65\xb2\x8b\xf7\xbe\x8b\xa3\x81\x3d\x32\x90\x2a\x1a\xd8\x47\x07\x36\x90\x72\x29\xa5\x54\x53\x8f\x73\xbd\x60\xa6\xf7\x60\xb6\xf8\xbc\xd7\xb1\x92\xa4\x90\xd1\x42\xb1\x1d\xc0\x37\x99\x42\x1b\x04\xaa\xa7\x4a\xa2\x94\x51\x32\xe4\x58\xaf\x80\xea\x15\xe3\xa3\xd3\x95\xa0\x1a\x83\x1d\xd5\xeb\xdc\x29\x16\xb0\xa2\x62\xd0\x31\xa2\xda\x45\x64\xaf\x90\xea\x95\x98\x62\x29\x21\x41\x2c\x55\x03\x95\x50\x81\xbd\x42\x60\x65\x63\x76\x59\xaa\x53\x43\x71\xf5\xc5\x51\xbd\x33\x98\x8a\x5f\xff\xf2\x6c\xa6\xc2\xa1\x0a\xc6\x5a\xdd\x1b\x14\x3a\xd4\x26\x58\x8b\x93\x4d\x45\xf1\x95\x8d\xe7\x02\xac\x37\xb9\x1e\x46\x60\x2a\x0e\x62\xad\x49\x92\xaf\xc5\x97\x38\xde\x54\x4c\xbb\xdb\x19\x4c\xc5\x37\x97\xb1\x1c\xc4\xc3\xb3\xda\x08\xab\xb4\xf6\xc5\x22\xa4\x9c\x3d\x90\xb7\x0a\x18\x63\x04\x36\x3a\x1a\xab\x33\x51\xbc\x1a\x1b\xf1\x25\x7e\x90\xb3\xb5\xbe\xba\x00\x49\x49\x01\x72\x92\x81\x4d\x34\xc0\x52\x63\x0a\x85\xbc\xd4\x21\x1e\xf1\xe9\xb2\x6d\x1e\xb6\x71\xd5\xbe\xb5\xf1\x71\xc1\xc6\x42\xb2\x2b\x98\xb2\x85\x52\x31\x01\x55\xef\x81\xc9\x07\x10\x1b\xb2\x24\x65\x42\x20\x77\x03\x76\xbc\x98\x82\x77\x2e\x45\xb0\x2e\x5a\x20\xee\x5c\x03\xbb\x0a\xa8\x9d\xc7\x4a\xda\x9a\x30\xf4\x3a\x5f\xed\x78\x5d\x41\x84\x88\xca\x6b\x1f\x8b\x01\xeb\x49\x03\x91\x76\xc0\xa6\x76\x11\xa2\x36\xa6\xd6\x6a\x8a\xee\xd9\x8e\xbd\xc2\xd4\x2b\x21\x49\xb4\x62\x20\xc4\xa8\x81\x94\xb7\xc0\xd9\x66\x50\x3a\x11\x25\xd7\x05\xdb\x43\x61\xd7\x57\x0e\x67\xb9\xf9\xe3\x17\xbf\xbf\xd4\x25\x77\x22\x31\xb8\x1c\x80\xb2\xd3\x40\xa1\x63\x92\xd6\x12\x50\xf2\xd6\x78\xe1\xea\x69\x28\xec\xea\x98\x48\xf3\xe2\xf9\x2f\x7f\x77\x5e\x21\x07\xd2\x3e\xba\x96\x94\xac\xb6\x20\xa5\x20\x50\xac\x16\x58\xd5\x0c\x64\xbc\x14\x44\xad\x23\x0d\x6d\x6d\x7e\x78\xb4\xdf\xbc\x78\xfe\xf3\x7f\xba\x5c\x40\x3a\x15\xd8\x56\x72\x60\xa4\x03\x24\x3b\x01\x46\x6d\x00\x53\x60\x4f\xa4\x24\xea\xdc\x63\x31\x0f\x57\xb3\x45\x7b\x55\x16\x33\x2b\xed\xbc\xcb\x11\x52\xdc\x44\x5e\x86\x80\x93\x58\xc8\x59\x10\xd9\x97\x18\x5d\x1e\xca\xb6\x6f\x84\x6d\x2e\x3b\x3e\x94\x42\xd1\x1a\x52\x40\x4e\x75\x76\x5d\x27\x60\x36\x0c\x98\xad\x13\x16\xb1\xa1\x0e\xc5\xaf\x2f\xa5\xbc\xec\x28\x51\x13\x07\x34\xac\x40\xc7\x8e\x02\x62\x29\xc0\xca\x10\x44\x95\x25\x1a\x4c\xd9\xcb\x90\x55\x7f\x29\xe5\xe9\x58\xf1\x82\x81\x59\x7d\x35\xb1\x10\x42\x32\x3a\x02\xc5\x8c\xc0\xba\x2a\x40\x96\xc8\x2a\xdb\x64\x48\xae\x7f\xcf\x3d\x27\x96\x5c\x62\x06\xc3\x49\x80\x8a\x71\xc0\x5e\x63\x17\xd0\x5a\xce\x99\x23\xcb\x90\x8e\x3f\xd0\x57\xb0\xe3\x2e\x2e\xfa\x8a\xc1\x03\x51\x87\x4c\xcf\x06\x38\x26\x03\x26\x56\x9b\xa2\xc3\x1c\xf5\x50\x5d\xc0\x83\x73\xc3\x71\x68\xb7\x3d\x3b\xd4\x1e\x25\x82\x2d\xd1\x03\x95\x8e\x09\x69\x76\x60\x3c\x3a\x5f\x58\x24\xc4\xa1\x80\xe9\xc1\xf9\x51\x38\x9d\xe6\xbf\x78\xfe\xab\xff\x3e\x2b\xcf\x47\x8b\x56\x31\xf5\xf3\x7c\x83\x0a\x15\xa9\x01\x9e\x7f\xe7\xa5\xb0\x7b\x69\xbe\xcc\x9f\xf7\x56\xbb\x29\xe5\x73\xcc\xce\x01\xc5\x64\x81\x52\xc7\x85\x6d\x42\x40\x15\x4a\x10\x6b\x63\x56\x79\x37\xf3\x9f\x56\xd9\x76\x09\x15\x71\x79\x77\x70\xf0\x50\xda\x76\xb6\xd8\x5f\x37\xdf\xfa\xeb\x37\x47\xeb\x4c\xe6\x9b\x92\xbf\x37\x40\xdc\xae\x36\xf8\x62\x7b\xa1\x9a\x63\x50\xbe\x8e\x25\x4e\x98\x9d\x51\x95\x72\x67\xa9\x02\x1b\x57\x3e\x34\xb6\x34\xe6\x2d\xe0\xfe\xa8\x1f\x6c\x3a\x04\xab\x69\xa8\x68\x42\x91\x0d\x2a\x4c\x0d\x2a\x75\x36\xd6\xd5\x20\x50\x91\x23\x50\xd2\x02\xec\xba\x07\xaa\x24\xa1\x50\xf4\x7a\x8b\x20\xde\x0a\x68\x75\x7c\x70\x1c\xa6\xb6\xc1\xd4\xab\xf7\x17\x02\xb4\xc9\x25\x91\xd7\x07\x34\x24\x65\x91\x06\xb2\x17\x48\x5a\x2b\x34\xd3\x81\x56\xc8\x50\x52\xe0\x6d\x74\x40\xde\x14\x60\x34\x02\xc1\x72\xcc\x81\x63\x75\xae\xdc\x50\xa0\x3d\x99\xc9\xd3\x1d\x40\xfb\xf0\x59\xf3\x16\x3f\xd9\x89\xb7\x0e\xa8\x9f\xad\x8a\xac\x4e\x55\x31\x74\xfe\xf5\xe8\x60\xf1\xed\x59\x69\x1f\x6f\x2e\xd9\xf2\xc7\x7b\x75\x36\x6f\x37\x57\x9c\x00\xdc\xf1\xb7\x3b\xca\x21\x3a\x84\xc6\x57\x7e\x2e\x2e\xca\x4e\x6e\xb6\xb7\xbf\x5a\x1e\x1d\x7e\xf8\xec\xfe\x59\x4a\x21\xf7\x1e\xcf\x4a\x91\xc5\x67\x1b\x6f\x7a\xbf\x9c\x96\x61\x6f\xbd\x5c\xb5\x9f\xed\xac\xd6\xd8\xbc\xc0\x47\x3b\xd3\x45\x9b\x83\xeb\x59\x9a\x4b\xef\x7d\x5f\x1e\x7f\x99\x39\x7a\x76\xbf\x9c\x26\x7e\xe3\x1e\xe4\xf5\x05\xdf\x1d\x61\x6c\x37\x15\x6a\x66\x40\x07\xd0\x1a\x37\x3d\x83\xe7\xaa\xb1\xc5\x24\x03\x2a\x15\x0f\x14\xd5\x66\x4f\x87\x80\x2c\xab\x80\xd9\xb8\xca\xe6\x86\xea\x40\x8f\xb1\xbd\x17\xdb\x98\xe2\x5a\x9a\x87\xc7\x97\x8e\xf4\xe5\xbf\xf8\xdf\x8b\x75\xe4\x97\x67\x5f\x47\x55\xe2\x4e\x72\xe4\x4c\xc1\x1b\x3f\x90\x1d\x0e\xe4\x9d\xa3\xa9\xd8\x4a\xa1\xe8\x9a\x3b\xf7\xad\xb4\x06\x52\xd5\x01\xeb\x9c\x20\x3a\x95\x94\x36\x21\x27\xbe\x65\xf6\xf5\xee\xfc\xad\x6d\xa6\x73\x59\xd7\xed\xe5\x1f\x55\x79\xfb\x41\xa3\x7d\x38\x81\x9a\xef\x7d\xef\x95\x74\xc8\xea\xfd\x33\x20\x55\x23\x9e\x05\x86\x5a\xab\x9d\xf6\xfc\x52\x9c\xc4\xc5\xd8\xf9\x36\xa6\x13\x45\x2b\x17\x60\xe7\xa7\x37\xc0\x4c\xaf\xf6\x1f\x05\x8c\x29\xbe\x04\xd1\x51\x70\x43\xbe\xc4\x38\x6d\x2c\x4e\xd5\xf7\xac\x72\x91\xac\x19\x90\x83\x01\x0a\x12\x80\x49\x32\x58\xb4\x25\xa9\x68\xa9\x98\x74\xbb\xf4\xfd\xc3\x67\xcd\xa9\xad\x9b\xdb\xc4\xa6\x26\x82\xf3\x66\xb1\xa9\x51\x38\x26\xf2\x61\x20\xdb\x81\x68\xd9\x93\x9f\x8a\xe3\xea\x62\x28\x5a\x12\x38\xe3\x04\xa8\x66\x0b\x6c\xb4\x87\xcc\x18\x83\x37\xac\x9d\xb7\x37\x14\xc7\x3d\x9c\xe8\xee\x83\xfb\xcd\x27\xf1\x99\xac\xc6\xb2\xa1\x1f\xff\xe7\x6d\x61\x43\x17\x1f\x6d\x2a\xa7\xdc\x20\xaa\xb4\xd3\x84\x43\x39\xb4\x9d\xa8\xea\x48\x50\x40\xe7\x21\x6d\x98\x36\x65\x0f\x6c\x10\x01\x91\x44\xe5\x8a\xe2\x1d\xef\x46\xd5\xb4\xbe\x8f\x4b\xe8\x17\xe9\x41\xd5\xa7\xcb\x27\x0d\x7e\x89\x65\x5c\x2e\x5a\x59\xb4\xaf\x8d\xe3\xf6\x0a\x7b\x51\xb1\x44\x65\x81\x12\x6b\xa0\x52\x22\xb0\x2a\x0e\xaa\xb5\xca\x56\xc9\x5c\x5c\xda\xf2\x6b\xef\xef\xc2\xe9\x4f\xff\x67\x1c\x4e\x47\xb5\x00\x7c\xd0\xec\x6d\x76\x05\x9b\xf9\x6c\xff\x71\xfb\x67\x27\xf1\x38\xaa\xad\x65\x6c\xe3\xc6\x78\x3c\x7a\xed\x11\x0d\x3a\xdb\x83\xc7\x4d\x8b\x32\x2b\xe3\x26\xa7\xd9\x12\x6b\x95\x75\x08\x20\xb1\x0b\x23\x9c\x62\xe0\xa4\x0c\xa0\x8a\x92\x02\x72\xd5\x5b\x15\x4f\x37\x0b\x8f\xfd\xde\xba\xdd\xde\xc7\xbe\x4d\xbe\x7a\x62\xd7\xd4\xcd\xf2\xd5\x93\x35\x6d\x3c\x5b\xdd\x34\xb4\x78\xa5\x7a\xd3\xcc\x5e\xb3\x62\x85\x67\xa8\x5d\x62\x6d\xd1\x57\x07\x2e\x98\x0a\x44\x5d\x18\x5d\x43\x85\xea\x31\x28\x54\xd4\x71\xe4\xdb\x85\xff\x47\x5d\x7c\xd3\x9c\x3c\x78\x61\xe1\xe9\x48\x0b\xea\x4e\x45\x93\x23\xcd\xa6\x36\xb6\x3f\xaa\x7d\x17\x67\x9e\xa1\xa9\xf2\x12\xf4\x30\x28\xa5\x86\x1a\xcb\xc8\x7a\xa6\xc9\x8d\x65\xa8\xb4\x4a\x44\x0c\x19\x03\x76\xd4\x30\x01\xc7\xe4\x21\x17\x67\x9d\xce\x29\xab\xd4\xb3\xdd\x33\xad\x89\xec\x12\x9a\xcf\xfa\x76\x12\xdb\xb8\x6a\x9b\xd8\x94\x38\x9b\x3f\x6b\xbe\xbf\x3c\x5a\x2d\xe2\x7c\x1c\xf3\xfe\xe3\xaf\x7f\x32\x7e\x4b\x71\x4c\x73\xda\x59\x1a\xc4\xc6\xb5\x74\x9c\xa5\x61\x61\x5c\x0f\xd3\xd8\x16\xa2\x29\x2c\xca\x5a\xeb\x69\x0b\x9c\x6f\x17\xcb\x5b\xd6\x4e\xf3\x64\xf4\xba\x9c\x23\xc7\x0c\x39\x11\x03\x45\xe3\x81\xd9\x12\x30\xa5\x28\x21\xe9\xc0\xd4\xc3\xea\xaf\x1d\xbd\xfd\x2c\x6a\x7d\x8b\x73\x1e\xd3\x3a\x36\x6f\x2e\x8f\x9a\xde\xed\x37\x4a\x6b\xa7\x58\x7c\x8b\x68\x8d\x1f\x60\x5e\xd6\x6a\x46\x37\x39\xbf\x62\xb8\x52\x12\xe5\xa1\xea\x1a\x3b\x83\x94\x81\xb3\xb6\x10\x83\xf2\x4a\xb9\x1a\xa2\xed\xc9\xaf\x5c\xbb\xce\xf4\x58\xfc\x4f\x24\xae\x16\x4d\xbb\x6c\x0e\xe3\x76\xd5\xe2\x97\x95\x8f\xfc\xee\x62\x0d\xfd\xe4\x3e\xdb\xd1\x86\x7e\x72\xe7\xdc\x35\x1a\x7a\x83\x2a\xd8\xde\xe4\xb6\xd7\x96\x82\x36\x3c\x79\x33\xcb\x2a\x6d\x32\xc7\xce\xbc\x0b\x01\x05\x55\x81\x83\x41\xd0\x3a\x50\x50\x51\x6b\x55\x6e\x19\x4d\xf9\xec\x50\x16\xcd\x4a\xda\xd9\x4a\x0e\x64\xd1\x36\x31\xe7\xe5\xd1\x78\xf4\xfe\xec\x5f\xdf\xd1\x94\x51\x2d\xc4\xd3\xd0\xcb\xce\xda\xbe\x64\xcf\xc6\xe4\x2a\xa5\x68\xf2\x20\x1a\xcb\x6c\x35\xb3\x80\x78\x8f\x40\xae\x43\xaf\x8f\x08\xec\x8c\xe2\x5c\x33\xf9\xdc\x93\xec\xb9\xa9\xe8\xfd\xe6\xd1\xa2\x31\x4d\x3b\x3b\x90\x75\x13\x9b\xa7\x22\x23\x2b\xac\x5e\x3c\xff\xd9\xdf\xdd\x16\xe0\x4e\x6e\xb8\x1d\x0d\xdc\x51\x7d\xe5\x93\x80\x4b\x06\x75\x7f\x8d\xd6\x06\xb8\x86\xf5\x64\xb3\x1b\x93\x75\x46\x62\x82\x44\xca\x03\x19\x8a\xc0\x5e\x33\x68\x2e\x99\xd9\x8b\x52\x58\x6f\x28\x70\xfb\xf9\x75\x39\x92\xa6\x6c\x37\xbe\xdf\x26\x86\x3d\xb1\xdf\xff\x96\x33\xec\x49\x7c\xd9\x22\x86\xe1\x18\xd3\xb0\xb1\x93\xf9\xb2\xf2\x29\xda\x68\x14\x18\x09\x0e\x48\xa4\x00\x97\x58\x81\x2d\xe5\xa4\x62\xf4\x46\xf5\x4c\x16\x9d\xd6\x7c\x7d\x09\x4d\xdb\x7d\x3a\xd0\xad\x66\xf3\x57\x17\x97\xa9\xbc\x25\x99\xc1\xab\xdb\x1b\x3f\xee\xf8\x1d\xa8\xe9\x3a\x7d\xc2\x58\x2c\x8a\x04\x5b\x4d\x80\x2c\xd8\xc5\x18\x5d\x24\xa0\x59\x83\xce\x49\x15\x94\x1a\x9d\xee\xb1\xc7\xd7\x8e\xc5\x1e\x22\xf1\x71\x5c\x15\x59\xcc\x16\xfb\xa3\xf7\xc6\xff\x63\x1c\x7f\x18\x35\x52\x60\x6c\x57\xff\x78\x5f\xec\x50\x1b\x52\x0a\x07\xbb\xbd\x2d\xfb\x30\x79\x07\xdb\xa2\x21\x8d\x59\x83\xb1\x26\x02\x61\x4d\xdd\xda\x57\x88\x25\xb9\x84\x62\x53\xf6\x3d\xf5\x7c\x37\x75\xed\x3f\x95\xa7\xcd\x55\x16\xe7\x5f\x1f\x24\x88\x9c\x36\xbd\xae\xa9\x3b\xc1\x6a\xe5\x26\x43\xc2\x17\xa5\xc9\x71\x00\xa9\xa1\x02\xe5\xea\x81\x1d\x17\x48\x62\xd1\x8b\xab\xc6\x95\x9e\x4d\xb4\x9b\x0a\x89\xaf\x8a\x94\xe6\xab\xf3\xa3\x5a\xbf\xa4\x84\xfe\x8d\x41\xf8\xf9\xbf\xdf\x74\x83\x80\x8a\x1d\x0d\x15\xf8\x62\x60\x6b\x27\xaf\x7e\xf0\x64\x9d\x4a\x01\x72\xb5\x15\x88\x54\x06\xf6\x55\x01\x5a\xa7\x6d\xf2\xda\xa0\x96\xdb\xb5\xfa\x1f\x2f\x9b\xba\x5c\x75\x01\x65\x9c\x8f\x0e\x28\xff\xfe\xb7\x37\x7d\xfd\x8d\x76\xd6\xf7\x66\x15\xba\x13\x8c\xc3\xe9\x05\x9f\x14\x42\xb5\x2c\x19\x12\x69\x04\xca\x4c\xc0\xb9\x12\x04\x1f\xd1\x39\x0e\x9e\x63\x8f\x43\x98\x36\xea\xe3\x12\x46\x84\xf4\x11\xd3\xa3\xfd\xf5\x71\x5f\xfc\xc5\xf0\xd2\xed\xe5\xbf\x80\x3d\xed\xad\xaf\x77\xf6\xc6\x2e\xca\xec\x15\x93\x9d\x2d\xf2\xfc\xa8\xc8\xc9\xa1\x23\xdb\x00\x7d\x19\xce\x4d\x9e\x19\xb1\xb9\xc7\xa6\x45\xf6\x6d\x91\x36\xc7\x46\x4d\x26\x38\x75\xd9\x77\x4f\x7c\xee\xef\xb3\xbd\x0c\xb2\x7e\xa7\xef\x95\x9e\x7a\x53\x93\x7b\xc6\x3b\xe4\xca\x13\x59\xad\x37\x85\xfb\x35\xce\xd7\x72\x67\xd7\x43\x5e\x61\x1d\xc1\xf4\x11\x36\xd3\x67\x8a\x4c\x1f\xfa\x30\xea\xcd\xde\x39\x8d\x95\x01\x83\x47\x84\x16\x79\xc0\xe1\x11\x79\x74\xd3\xa3\x1f\x2b\xae\x6a\x9b\x34\x20\x26\x06\x92\x0e\xda\x88\x11\x62\x41\x34\x05\x75\x46\xd5\x93\x46\xbd\x76\x83\xd7\x97\x46\x95\x0e\x71\xcd\xdd\x07\xf7\x9b\x22\xeb\xd9\xfe\x62\xac\xd3\xfb\xe2\xb7\xa3\x0b\x15\x46\x41\xe8\x2c\x93\x61\xc6\xc1\xf9\x2c\x13\x91\xc6\x81\xf8\x2c\xd3\x2e\xc6\x81\x7d\xec\x60\x85\x29\x2c\x00\x6d\x08\x8a\xb9\x5f\x29\x8c\x56\x6c\x71\x72\x8a\xd6\x73\x48\x6c\x28\x01\x69\xb4\x40\x36\xeb\xe3\xf4\x54\x31\x2e\xb9\x90\x05\x19\x7b\xb6\x73\xaf\x5d\x29\x06\xda\x3e\x4e\xce\x9f\xb9\xe1\xd9\xa9\x13\x09\xda\x89\xf6\xf7\x4f\xc5\x5b\x5e\x42\x86\x78\xba\xef\xbb\x70\x4f\x66\x94\xb2\xd6\x0c\x2a\x2d\xb1\x71\x93\xeb\x96\x82\x41\x55\x1c\x29\xc8\xb5\x78\x20\x5b\x0d\x70\x46\x0d\x25\x2a\x54\xda\x4b\x56\xb6\xa7\x57\xeb\xda\x95\xb6\xc7\x93\xdd\xcf\xcb\xc5\xba\x29\xcb\xc5\x9f\xb7\x4d\x99\xad\x0f\xe7\x71\x74\x00\xff\x93\x5f\x5d\xac\x23\x9b\x3c\x9b\xeb\x06\x38\xb2\xc9\xc3\xa5\x46\x3b\xb2\x51\x53\x8c\x26\x39\xb2\x60\x18\xd5\x40\x32\xcb\x68\x85\x56\x4d\xae\x08\x4f\xcc\x81\xd9\x45\xa8\x95\x03\x90\x98\xce\x97\x57\x07\x16\x83\x38\xaf\xa3\xa9\xa1\xa7\x96\xef\xc6\xea\xc4\xc1\xe1\x72\xd5\x36\x7f\xd9\x7c\xe5\x07\xdd\xff\x8c\xd5\x87\x7f\xfc\xe7\x8b\xd5\x87\xc9\xe3\xf4\x46\xeb\xc3\xe4\x11\x92\xa3\xf5\x61\xf2\x48\xb8\x6b\x24\x76\xdd\x23\x9b\x30\xa8\x0f\x64\xfd\xe4\xf4\x5e\x4a\xb9\x38\xeb\x23\xc4\x4d\xff\xbe\x2b\x1e\xd8\x2b\x0b\x39\x06\x62\xf2\x58\x95\xf4\x0c\x82\xbe\x76\x7d\xe8\xed\x90\x58\x7f\xbe\x3e\x9e\xcc\xf8\x2e\xbf\x73\xd6\xfc\xce\x28\x6d\x3e\x75\xd9\xbb\xfc\xce\xab\x17\xfb\x2e\xbf\x73\x21\xf9\x1d\x0e\x64\x06\x12\xda\x64\x15\x7b\x3d\xb9\x17\x25\x65\x97\x22\x55\x03\x64\xfd\x66\x3b\xab\x00\xc7\x10\xa0\x56\x97\x94\xb7\x25\xaa\x78\x53\x59\x71\x8f\xc5\xfb\xca\xe1\x2c\xaf\x37\xf3\x72\xdf\x19\xbc\xb3\x1a\xbc\x51\x79\xa9\x5b\x68\xf0\x26\x2b\xf2\x3b\x83\x77\x5d\x06\xcf\x68\x67\x3c\x0d\x19\x3c\xf2\x1c\xcc\xe4\x34\x40\xe6\x4a\x96\x55\x01\x63\x93\x02\x32\x66\xb3\x25\x99\x21\xb3\x76\x9c\x6d\x64\xd7\xf7\xb7\x3e\x6e\xaa\xc1\x3b\xcb\xc8\x96\xed\xa5\x9b\x94\x18\xd9\x5c\x31\x29\x6c\x3c\x06\xed\x98\x6d\x84\x9d\xda\x74\xbd\x99\xc5\x89\xca\xf6\xa7\xc2\xd3\x6e\x44\x66\xf1\x06\x18\x21\xb4\x68\x07\x8b\x88\x8c\x46\xf2\x6a\x72\x9c\x29\x9c\xbd\x90\x52\x90\x29\x46\x20\xf4\x19\xd8\x08\x43\x24\xaf\x93\x15\xd6\x18\x6f\x6a\xde\x65\x30\xce\x4c\xd7\x39\x3d\xea\x56\x30\xab\xeb\x0f\x25\xaf\xd0\xbe\x5d\xa1\x79\x99\x3e\xde\x7e\x94\x79\x99\x14\xa2\x59\x74\x4c\x03\x43\xe6\xc8\x92\x71\xd3\x9b\x47\x47\x4d\x0d\xda\x69\x2c\xa6\x0d\x60\xba\x84\xb1\x1d\x9b\xbf\x0b\xfc\xb6\xb1\x78\xef\xbd\xe6\xde\x6c\x9d\x8f\xd6\xeb\xd9\x72\xd1\xcc\x5a\x39\x58\x7f\x67\xf1\x17\xcd\x67\x0b\xf9\xce\xa2\xfb\xe7\xbd\xf7\x9a\xbb\xb9\x3d\x71\xec\x7e\x2b\x07\x0d\x34\xcb\xa7\x8b\xdd\x23\xbd\xfa\xd6\xe5\xf5\xb4\xa0\xbe\x75\xd9\x71\xc2\xee\x11\xf1\x77\x7e\x74\xe7\xff\x03\x00\x00\xff\xff\x11\xa4\x9e\x55\x3d\x85\x00\x00")

func templatesJsonBytes() ([]byte, error) {
	return bindataRead(
		_templatesJson,
		"templates.json",
	)
}

func templatesJson() (*asset, error) {
	bytes, err := templatesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates.json", size: 34109, mode: os.FileMode(0644), modTime: time.Unix(1643307920, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9c, 0xed, 0xc6, 0x9, 0x90, 0xa3, 0xd6, 0xdb, 0x1a, 0xd, 0x20, 0x64, 0xac, 0xd2, 0xdb, 0x91, 0xed, 0xf7, 0xfb, 0xd3, 0xb8, 0xca, 0x95, 0xac, 0xbc, 0xe7, 0x3e, 0xd1, 0xdd, 0xd1, 0xd1, 0xa8}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates.json": templatesJson,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates.json": {templatesJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
