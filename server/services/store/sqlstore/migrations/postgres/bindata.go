// Code generated by go-bindata. DO NOT EDIT.
// sources:
// postgres_files/000001_init.down.sql (22B)
// postgres_files/000001_init.up.sql (271B)
// postgres_files/000002_system_settings_table.down.sql (31B)
// postgres_files/000002_system_settings_table.up.sql (100B)
// postgres_files/000003_blocks_rootid.down.sql (43B)
// postgres_files/000003_blocks_rootid.up.sql (54B)
// postgres_files/000004_auth_table.down.sql (45B)
// postgres_files/000004_auth_table.up.sql (497B)
// postgres_files/000005_blocks_modifiedby.down.sql (47B)
// postgres_files/000005_blocks_modifiedby.up.sql (58B)
// postgres_files/000006_sharing_table.down.sql (23B)
// postgres_files/000006_sharing_table.up.sql (162B)
// postgres_files/000007_workspaces_table.down.sql (26B)
// postgres_files/000007_workspaces_table.up.sql (182B)
// postgres_files/000008_teams.down.sql (149B)
// postgres_files/000008_teams.up.sql (272B)

package postgres

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\x4b\x8a\x4f\xca\xc9\x4f\xce\x2e\xb6\xe6\x02\x04\x00\x00\xff\xff\xc6\x9e\x40\x78\x16\x00\x00\x00")

func _000001_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_initDownSql,
		"000001_init.down.sql",
	)
}

func _000001_initDownSql() (*asset, error) {
	bytes, err := _000001_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_init.down.sql", size: 22, mode: os.FileMode(0644), modTime: time.Unix(1618509226, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x77, 0x0, 0xbb, 0x8b, 0xa8, 0x2e, 0xe8, 0x20, 0xbf, 0x75, 0x6c, 0xdb, 0xf8, 0xce, 0x31, 0x6c, 0xb4, 0x4d, 0x73, 0x76, 0xdc, 0x38, 0x85, 0x9, 0x13, 0xe1, 0xd3, 0xc8, 0xde, 0xfc, 0x84, 0x4b}}
	return a, nil
}

var __000001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x31\x4f\xc3\x30\x10\x85\xe7\xf8\x57\xbc\x31\x91\xb2\x21\xb1\x30\xb9\xe5\x0a\x86\xc4\xa9\x9c\x2b\xb4\x2c\x51\x1a\x5f\x85\x45\x28\x51\x62\x06\xfe\x3d\x6a\x87\x0c\xe9\x76\xf7\xe9\xbe\x7b\x7a\x6b\x47\x9a\x09\xac\x57\x05\xc1\x6c\x60\x2b\x06\xed\x4d\xcd\x35\x4e\xc7\xe6\xd8\xff\x74\x5f\x13\x52\x95\x04\x8f\x37\xed\xd6\xcf\xda\xa5\x77\xf7\x59\xae\x92\x70\x9e\x64\x8c\x4d\x1b\xc1\xa6\xa4\x9a\x75\xb9\xe5\x8f\xab\x6e\x77\x45\x81\x47\xda\xe8\x5d\xc1\xb0\xd5\x7b\x7a\x39\x1f\xda\x51\xce\xb1\xb9\x79\x33\x75\x9f\xf2\xdd\x62\x65\x9e\x8c\xe5\x5c\x25\xf1\x6f\x10\x30\xed\xaf\x73\x88\xfd\xbc\x9c\x82\xf4\x7e\xc2\x4b\x5d\xd9\x5c\x25\xdd\x28\x6d\x94\x4b\xfa\x6c\xfe\x0e\x7e\x89\xbc\xf4\xb2\x40\x5b\x67\x4a\xed\x0e\x78\xa5\x03\xd2\xe0\x73\xcc\x3d\x32\x95\x3d\xa8\xff\x00\x00\x00\xff\xff\x56\xa2\x1a\x36\x0f\x01\x00\x00")

func _000001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_initUpSql,
		"000001_init.up.sql",
	)
}

func _000001_initUpSql() (*asset, error) {
	bytes, err := _000001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_init.up.sql", size: 271, mode: os.FileMode(0644), modTime: time.Unix(1618509229, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1b, 0x8d, 0xa2, 0xc8, 0xe7, 0x96, 0x1f, 0x4a, 0x65, 0x14, 0x7a, 0xf3, 0x32, 0x99, 0xb4, 0xde, 0xe0, 0x29, 0x92, 0xdd, 0x5f, 0x2f, 0x0, 0xe1, 0xdc, 0x9a, 0xcf, 0x24, 0x98, 0xb4, 0x4f, 0xe3}}
	return a, nil
}

var __000002_system_settings_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\x4b\x8a\x2f\xae\x2c\x2e\x49\xcd\x8d\x2f\x4e\x2d\x29\xc9\xcc\x4b\x2f\xb6\xe6\x02\x04\x00\x00\xff\xff\xe3\x7d\x4a\x4c\x1f\x00\x00\x00")

func _000002_system_settings_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_system_settings_tableDownSql,
		"000002_system_settings_table.down.sql",
	)
}

func _000002_system_settings_tableDownSql() (*asset, error) {
	bytes, err := _000002_system_settings_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_system_settings_table.down.sql", size: 31, mode: os.FileMode(0644), modTime: time.Unix(1618509233, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb0, 0xf4, 0x75, 0xc2, 0x51, 0xd7, 0xdd, 0x27, 0x9b, 0x7c, 0xa8, 0x3f, 0xb9, 0xb6, 0x31, 0x5c, 0xe3, 0x7c, 0xfd, 0x46, 0x52, 0x60, 0x61, 0xb, 0x4, 0xc4, 0x7d, 0x99, 0x1d, 0x94, 0xc0, 0x98}}
	return a, nil
}

var __000002_system_settings_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xbd\x0a\xc2\x30\x10\x07\xf0\x39\xf7\x14\xff\x31\x81\x0e\x75\x76\x3a\xcb\x89\xc1\x4f\xae\x87\xb4\x53\x51\x1a\x25\xa0\x2e\x89\x82\x6f\xdf\x5f\xa7\xc2\x26\x30\xde\x1c\x04\x71\x8b\xd3\xd9\x20\x43\xec\xad\xc7\xe3\x3e\x95\x7f\xa9\xe9\x3d\x95\x54\x6b\xfe\x3c\x0b\x3c\xb9\x3c\xe3\xca\xda\xed\x58\xfd\xaa\x6d\x43\x43\xee\x77\x7b\x7d\x13\x4c\x06\x6b\xc8\x5d\x34\x1e\x59\x47\xec\x65\x84\xcf\x73\xa0\xb0\xa6\x25\x00\x00\xff\xff\xf5\xfe\x47\x15\x64\x00\x00\x00")

func _000002_system_settings_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_system_settings_tableUpSql,
		"000002_system_settings_table.up.sql",
	)
}

func _000002_system_settings_tableUpSql() (*asset, error) {
	bytes, err := _000002_system_settings_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_system_settings_table.up.sql", size: 100, mode: os.FileMode(0644), modTime: time.Unix(1618509244, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2e, 0xa9, 0x97, 0x84, 0xe7, 0xff, 0x82, 0x95, 0x69, 0x7f, 0xfa, 0xa8, 0x95, 0xb3, 0x4f, 0x39, 0x34, 0xb4, 0x75, 0x78, 0xd0, 0x5a, 0x68, 0x60, 0xde, 0xd3, 0x5e, 0x5e, 0x92, 0xba, 0x91, 0xfe}}
	return a, nil
}

var __000003_blocks_rootidDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\x4b\x8a\x4f\xca\xc9\x4f\xce\x2e\xe6\x72\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\x28\xca\xcf\x2f\x89\xcf\x4c\xb1\xe6\x02\x04\x00\x00\xff\xff\xa6\x48\x1b\x74\x2b\x00\x00\x00")

func _000003_blocks_rootidDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000003_blocks_rootidDownSql,
		"000003_blocks_rootid.down.sql",
	)
}

func _000003_blocks_rootidDownSql() (*asset, error) {
	bytes, err := _000003_blocks_rootidDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000003_blocks_rootid.down.sql", size: 43, mode: os.FileMode(0644), modTime: time.Unix(1618509249, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb0, 0x92, 0xb7, 0x87, 0x43, 0x47, 0xd3, 0x29, 0x56, 0x7c, 0x7a, 0x33, 0x69, 0x4b, 0x7c, 0x3e, 0xbf, 0x9c, 0xd6, 0x59, 0x77, 0x6a, 0x61, 0x40, 0xde, 0x29, 0x7c, 0xd4, 0xd1, 0x5c, 0xd8, 0x69}}
	return a, nil
}

var __000003_blocks_rootidUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\x4b\x8a\x4f\xca\xc9\x4f\xce\x2e\xe6\x72\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\x28\xca\xcf\x2f\x89\xcf\x4c\x51\x08\x73\x0c\x72\xf6\x70\x0c\xd2\x30\x36\xd3\xb4\xe6\x02\x04\x00\x00\xff\xff\x52\x3e\x7a\x79\x36\x00\x00\x00")

func _000003_blocks_rootidUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000003_blocks_rootidUpSql,
		"000003_blocks_rootid.up.sql",
	)
}

func _000003_blocks_rootidUpSql() (*asset, error) {
	bytes, err := _000003_blocks_rootidUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000003_blocks_rootid.up.sql", size: 54, mode: os.FileMode(0644), modTime: time.Unix(1618509251, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb, 0x18, 0x85, 0xb1, 0xf2, 0x5, 0x17, 0x1e, 0x47, 0x6b, 0xe6, 0xc7, 0x2b, 0x1c, 0xbf, 0x7f, 0x6a, 0xa7, 0xb2, 0x5f, 0xc8, 0xa, 0x80, 0x68, 0xec, 0xb5, 0x12, 0x88, 0x17, 0xb5, 0xe1, 0xb1}}
	return a, nil
}

var __000004_auth_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\x4b\x8a\x2f\x2d\x4e\x2d\x2a\xb6\xe6\x42\x15\x2c\x4e\x2d\x2e\xce\xcc\xcf\x2b\xb6\xe6\x02\x04\x00\x00\xff\xff\xbf\xc8\xeb\xcb\x2d\x00\x00\x00")

func _000004_auth_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000004_auth_tableDownSql,
		"000004_auth_table.down.sql",
	)
}

func _000004_auth_tableDownSql() (*asset, error) {
	bytes, err := _000004_auth_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000004_auth_table.down.sql", size: 45, mode: os.FileMode(0644), modTime: time.Unix(1618509308, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd0, 0x83, 0x21, 0x4, 0x3a, 0x1d, 0x76, 0xd4, 0x76, 0x3a, 0x8f, 0xea, 0xab, 0xf4, 0xaa, 0x32, 0x49, 0xfe, 0xa2, 0xa0, 0x94, 0x33, 0xf4, 0x11, 0x8e, 0xd, 0x61, 0x7c, 0x20, 0x75, 0xba, 0xf5}}
	return a, nil
}

var __000004_auth_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\xcd\x4e\xc3\x30\x10\x84\xcf\xf1\x53\xec\x31\x91\x7a\x28\x95\x7a\xe2\xe4\x56\x06\xcc\x4f\x8a\x1c\x0b\xd1\x93\xb5\xc4\x5b\x61\xd1\xfc\xc8\xeb\xc2\xeb\xa3\x08\x89\x4a\x49\xe0\xd2\x3d\x7e\xb3\xda\x99\x9d\xad\x51\xd2\x2a\xb0\x72\xf3\xa8\x40\xdf\x40\xb9\xb3\xa0\x5e\x75\x65\x2b\x38\xbc\xb9\x13\x53\x64\xc8\x45\x16\x3c\xbc\x48\xb3\xbd\x93\x26\xbf\x5a\x2e\x8b\x85\xc8\x06\xa9\xc5\x86\xc6\x9c\x1a\x0c\xc7\x5f\xb8\x5a\xaf\x07\xd8\x23\xf3\x57\x17\x27\x47\x9a\x03\x3a\xa6\x3a\x52\x1a\x2b\x78\x4a\xef\x8e\x29\x7e\x86\xfa\x6c\xb1\x3a\x4b\x1e\x13\x4e\x5c\x62\xd7\x33\xfc\xcc\x7d\xb5\x2b\x17\x22\xab\x23\x61\x22\x87\x69\x60\x1b\x7d\xab\x4b\x3b\x64\xef\xfd\x0c\xf5\x74\xa4\x29\x7d\x36\xfa\x49\x9a\x3d\x3c\xa8\x3d\xe4\xc1\x17\xa2\xb8\x16\xe2\xff\xd6\x98\x98\x43\xd7\xfe\x51\x5c\xea\x3e\xa8\x9d\x6b\xd3\x4d\x77\x2f\xfc\x68\x2e\xfb\x77\x00\x00\x00\xff\xff\x37\x86\x0c\x4f\xf1\x01\x00\x00")

func _000004_auth_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000004_auth_tableUpSql,
		"000004_auth_table.up.sql",
	)
}

func _000004_auth_tableUpSql() (*asset, error) {
	bytes, err := _000004_auth_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000004_auth_table.up.sql", size: 497, mode: os.FileMode(0644), modTime: time.Unix(1618509266, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x86, 0x5a, 0xe, 0x47, 0x4b, 0x50, 0xb8, 0xab, 0xc4, 0x2c, 0x74, 0x98, 0x66, 0x88, 0x88, 0x2, 0x3a, 0xdf, 0xd0, 0x8, 0xa1, 0x9d, 0x4d, 0xea, 0x57, 0x8f, 0xe9, 0x6c, 0xbd, 0xba, 0x32, 0x8e}}
	return a, nil
}

var __000005_blocks_modifiedbyDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\x4b\x8a\x4f\xca\xc9\x4f\xce\x2e\xe6\x72\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\xc8\xcd\x4f\xc9\x4c\xcb\x4c\x4d\x89\x4f\xaa\xb4\xe6\x02\x04\x00\x00\xff\xff\x24\x28\x33\x94\x2f\x00\x00\x00")

func _000005_blocks_modifiedbyDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000005_blocks_modifiedbyDownSql,
		"000005_blocks_modifiedby.down.sql",
	)
}

func _000005_blocks_modifiedbyDownSql() (*asset, error) {
	bytes, err := _000005_blocks_modifiedbyDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000005_blocks_modifiedby.down.sql", size: 47, mode: os.FileMode(0644), modTime: time.Unix(1618509269, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x28, 0x41, 0xe0, 0x27, 0x48, 0x91, 0x67, 0x19, 0xf2, 0xc1, 0x8b, 0x94, 0x1d, 0x36, 0x2f, 0xc5, 0xac, 0x8, 0x89, 0x42, 0x7c, 0x11, 0x36, 0xb6, 0x2f, 0x3f, 0xba, 0x31, 0xf, 0x74, 0x56, 0x11}}
	return a, nil
}

var __000005_blocks_modifiedbyUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\x4b\x8a\x4f\xca\xc9\x4f\xce\x2e\xe6\x72\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\xc8\xcd\x4f\xc9\x4c\xcb\x4c\x4d\x89\x4f\xaa\x54\x08\x73\x0c\x72\xf6\x70\x0c\xd2\x30\x36\xd3\xb4\xe6\x02\x04\x00\x00\xff\xff\xc9\xa0\xbc\xb6\x3a\x00\x00\x00")

func _000005_blocks_modifiedbyUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000005_blocks_modifiedbyUpSql,
		"000005_blocks_modifiedby.up.sql",
	)
}

func _000005_blocks_modifiedbyUpSql() (*asset, error) {
	bytes, err := _000005_blocks_modifiedbyUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000005_blocks_modifiedby.up.sql", size: 58, mode: os.FileMode(0644), modTime: time.Unix(1618509272, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa2, 0x6c, 0x55, 0x46, 0xce, 0xc8, 0xe8, 0xd, 0xa0, 0xf9, 0xb6, 0x4f, 0x6d, 0xe8, 0xe1, 0x2b, 0xb9, 0x14, 0xb6, 0xce, 0x51, 0xae, 0xa4, 0xd6, 0xed, 0x54, 0xba, 0x81, 0x8f, 0x2b, 0x5a, 0x35}}
	return a, nil
}

var __000006_sharing_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\x4b\x8a\x2f\xce\x48\x2c\xca\xcc\x4b\xb7\xe6\x02\x04\x00\x00\xff\xff\x67\xdf\xa4\x9c\x17\x00\x00\x00")

func _000006_sharing_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000006_sharing_tableDownSql,
		"000006_sharing_table.down.sql",
	)
}

func _000006_sharing_tableDownSql() (*asset, error) {
	bytes, err := _000006_sharing_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000006_sharing_table.down.sql", size: 23, mode: os.FileMode(0644), modTime: time.Unix(1618509276, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf1, 0x2f, 0x65, 0xee, 0xcb, 0x7e, 0xaa, 0xd7, 0x8e, 0x40, 0x10, 0x7f, 0xc5, 0x4c, 0x45, 0xce, 0xec, 0x18, 0xa4, 0x72, 0x1f, 0x93, 0xbf, 0x8e, 0x1a, 0x5a, 0xb8, 0xd7, 0xca, 0x79, 0x86, 0x51}}
	return a, nil
}

var __000006_sharing_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcc\x31\x0b\x82\x40\x14\x00\xe0\xf9\xde\xaf\x78\xa3\x82\x83\x11\xb4\x34\x3d\xe5\x55\x47\xa6\x71\x1e\x91\x93\x9c\xbc\xb3\x8e\x4a\xa3\x6c\xe8\xdf\x47\x4b\x43\xfb\xc7\x97\x1b\x26\xcb\x68\x29\x2b\x18\xf5\x0a\xcb\xca\x22\x1f\x75\x6d\x6b\xec\xbb\xf6\x79\x76\x8f\x30\x9c\x30\x02\x15\x04\x0f\x64\xf2\x0d\x99\x68\xbe\x88\x13\x50\x7e\x70\xdd\xd5\x0b\x66\x55\x55\x30\x95\x09\xa8\x69\xbc\xf8\xe1\xa7\x66\x69\xfa\x65\xb7\x51\x42\x1f\xbc\xb4\xdd\xfb\x2f\x78\xdd\xc5\x4d\xbe\x75\x13\x66\x7a\xad\x4b\x9b\x80\xda\x1b\xbd\x23\xd3\xe0\x96\x1b\x8c\x82\xc4\x10\x2f\xe1\x13\x00\x00\xff\xff\x3e\xc2\xbd\x80\xa2\x00\x00\x00")

func _000006_sharing_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000006_sharing_tableUpSql,
		"000006_sharing_table.up.sql",
	)
}

func _000006_sharing_tableUpSql() (*asset, error) {
	bytes, err := _000006_sharing_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000006_sharing_table.up.sql", size: 162, mode: os.FileMode(0644), modTime: time.Unix(1618509278, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x91, 0xf1, 0x93, 0x3d, 0x1c, 0x5, 0x67, 0x8d, 0x2f, 0x65, 0x71, 0x4b, 0x68, 0x6d, 0xc2, 0x47, 0x3f, 0x30, 0x25, 0xa3, 0x3, 0x50, 0x30, 0x64, 0xc, 0x13, 0x34, 0x22, 0x6f, 0xca, 0x2a, 0xb1}}
	return a, nil
}

var __000007_workspaces_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\x4b\x8a\x2f\xcf\x2f\xca\x2e\x2e\x48\x4c\x4e\x2d\xb6\xe6\x02\x04\x00\x00\xff\xff\x2a\xc0\x30\x6e\x1a\x00\x00\x00")

func _000007_workspaces_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000007_workspaces_tableDownSql,
		"000007_workspaces_table.down.sql",
	)
}

func _000007_workspaces_tableDownSql() (*asset, error) {
	bytes, err := _000007_workspaces_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000007_workspaces_table.down.sql", size: 26, mode: os.FileMode(0644), modTime: time.Unix(1618509280, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x65, 0x55, 0x65, 0x5d, 0xc9, 0x3c, 0x8a, 0x11, 0xd3, 0x6a, 0xb8, 0x93, 0xd, 0xdc, 0x6, 0x8e, 0x2e, 0xd, 0x3d, 0x40, 0x3d, 0xe0, 0xca, 0x82, 0xc6, 0xab, 0xdd, 0xf1, 0x5, 0x35, 0xe, 0x0}}
	return a, nil
}

var __000007_workspaces_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcc\x41\xcb\x82\x30\x18\x00\xe0\xf3\xf6\x2b\xde\xa3\x83\x1d\xfc\xf8\xa0\x4b\xa7\x29\xab\x56\x36\x63\xae\xc8\xd3\xd0\x36\x65\x48\x2a\x6d\x12\xfd\xfb\xa0\x43\x87\xce\x0f\x3c\xb9\xe2\x4c\x73\xd0\x2c\x2b\x38\x88\x0d\xc8\x52\x03\xbf\x8a\x4a\x57\xd0\xb5\xe6\x39\x3d\x86\x30\x37\x37\x17\x20\xc1\xc8\x5b\xb8\x30\x95\xef\x98\x4a\xfe\x57\x84\x62\x14\x7c\x3f\x2e\xb3\x89\xd3\xe0\xc6\x2f\xfd\xa5\x29\xf9\x34\xf2\x5c\x14\x14\x03\x00\x04\x17\xa3\x1f\xfb\x00\xfb\xaa\x94\x14\xa3\xfb\x64\x7d\xe7\x9d\x35\xed\xeb\x67\x5c\x66\xdb\x44\x67\x9a\x08\x99\xd8\x0a\xa9\x29\x46\x27\x25\x8e\x4c\xd5\x70\xe0\x35\x24\xde\x12\x4c\xd6\xf8\x1d\x00\x00\xff\xff\x57\x99\x07\xe9\xb6\x00\x00\x00")

func _000007_workspaces_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000007_workspaces_tableUpSql,
		"000007_workspaces_table.up.sql",
	)
}

func _000007_workspaces_tableUpSql() (*asset, error) {
	bytes, err := _000007_workspaces_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000007_workspaces_table.up.sql", size: 182, mode: os.FileMode(0644), modTime: time.Unix(1618509282, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf0, 0x76, 0xbe, 0x7d, 0x3c, 0x73, 0xb8, 0xb0, 0xc3, 0xb8, 0x94, 0x52, 0x53, 0xe1, 0xab, 0x31, 0x0, 0x6f, 0x0, 0xf2, 0x84, 0x6a, 0x3b, 0xa0, 0x3e, 0xc6, 0xc, 0xf2, 0xd6, 0x56, 0xa5, 0x87}}
	return a, nil
}

var __000008_teamsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\x4b\x8a\x4f\xca\xc9\x4f\xce\x2e\xe6\x72\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\x28\xcf\x2f\xca\x2e\x2e\x48\x4c\x4e\x8d\xcf\x4c\xb1\xe6\xe2\x42\xd3\x50\x9c\x91\x58\x94\x99\x97\x4e\x8a\x8e\xd4\xe2\xe2\xcc\xfc\x3c\x54\x4b\x12\x4b\x4b\x32\xe2\x8b\x53\x8b\xca\x32\x93\x53\xad\xb9\x00\x01\x00\x00\xff\xff\x7e\xc5\xdc\xb2\x95\x00\x00\x00")

func _000008_teamsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000008_teamsDownSql,
		"000008_teams.down.sql",
	)
}

func _000008_teamsDownSql() (*asset, error) {
	bytes, err := _000008_teamsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000008_teams.down.sql", size: 149, mode: os.FileMode(0644), modTime: time.Unix(1618509288, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9f, 0xea, 0xaf, 0xaf, 0x31, 0x74, 0x5e, 0xf0, 0xaa, 0xca, 0xe8, 0x61, 0xef, 0x7f, 0xf8, 0x52, 0xf8, 0x11, 0x81, 0xc4, 0xf5, 0x73, 0x60, 0xfd, 0x90, 0xfa, 0xd4, 0x88, 0x7b, 0xe3, 0xab, 0xf7}}
	return a, nil
}

var __000008_teamsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\x4b\x8a\x4f\xca\xc9\x4f\xce\x2e\xe6\x72\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\x28\xcf\x2f\xca\x2e\x2e\x48\x4c\x4e\x8d\xcf\x4c\x51\x08\x73\x0c\x72\xf6\x70\x0c\xd2\x30\x36\xd3\xb4\xe6\xe2\x42\xd3\x5b\x9c\x91\x58\x94\x99\x97\x4e\xa6\xe6\xd4\xe2\xe2\xcc\xfc\x3c\x14\xab\x13\x4b\x4b\x32\xe2\x8b\x53\x8b\xca\x32\x93\x53\xe1\xba\x8d\x0c\x40\xba\x43\x03\x5c\x1c\x43\x90\x5c\xac\x10\xec\x1a\x82\x6a\x9b\xad\x82\xba\x81\xba\x42\xb8\x87\x6b\x90\x2b\x86\x84\xba\x82\x7f\x10\xaa\xa0\x67\xb0\x82\x5f\xa8\x8f\x8f\x35\x17\x20\x00\x00\xff\xff\x9a\xf9\x80\x5f\x10\x01\x00\x00")

func _000008_teamsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000008_teamsUpSql,
		"000008_teams.up.sql",
	)
}

func _000008_teamsUpSql() (*asset, error) {
	bytes, err := _000008_teamsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000008_teams.up.sql", size: 272, mode: os.FileMode(0644), modTime: time.Unix(1618509295, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x76, 0x48, 0x37, 0x4d, 0x9d, 0x33, 0xb8, 0x9d, 0x7a, 0xaa, 0x30, 0x50, 0xd5, 0x3, 0x1a, 0x7c, 0x5c, 0xf1, 0xfc, 0x81, 0xdf, 0x84, 0x5e, 0xbd, 0x4b, 0x34, 0xdc, 0x1b, 0xab, 0xa7, 0x11, 0x65}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_init.down.sql":                  _000001_initDownSql,
	"000001_init.up.sql":                    _000001_initUpSql,
	"000002_system_settings_table.down.sql": _000002_system_settings_tableDownSql,
	"000002_system_settings_table.up.sql":   _000002_system_settings_tableUpSql,
	"000003_blocks_rootid.down.sql":         _000003_blocks_rootidDownSql,
	"000003_blocks_rootid.up.sql":           _000003_blocks_rootidUpSql,
	"000004_auth_table.down.sql":            _000004_auth_tableDownSql,
	"000004_auth_table.up.sql":              _000004_auth_tableUpSql,
	"000005_blocks_modifiedby.down.sql":     _000005_blocks_modifiedbyDownSql,
	"000005_blocks_modifiedby.up.sql":       _000005_blocks_modifiedbyUpSql,
	"000006_sharing_table.down.sql":         _000006_sharing_tableDownSql,
	"000006_sharing_table.up.sql":           _000006_sharing_tableUpSql,
	"000007_workspaces_table.down.sql":      _000007_workspaces_tableDownSql,
	"000007_workspaces_table.up.sql":        _000007_workspaces_tableUpSql,
	"000008_teams.down.sql":                 _000008_teamsDownSql,
	"000008_teams.up.sql":                   _000008_teamsUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_init.down.sql": {_000001_initDownSql, map[string]*bintree{}},
	"000001_init.up.sql": {_000001_initUpSql, map[string]*bintree{}},
	"000002_system_settings_table.down.sql": {_000002_system_settings_tableDownSql, map[string]*bintree{}},
	"000002_system_settings_table.up.sql": {_000002_system_settings_tableUpSql, map[string]*bintree{}},
	"000003_blocks_rootid.down.sql": {_000003_blocks_rootidDownSql, map[string]*bintree{}},
	"000003_blocks_rootid.up.sql": {_000003_blocks_rootidUpSql, map[string]*bintree{}},
	"000004_auth_table.down.sql": {_000004_auth_tableDownSql, map[string]*bintree{}},
	"000004_auth_table.up.sql": {_000004_auth_tableUpSql, map[string]*bintree{}},
	"000005_blocks_modifiedby.down.sql": {_000005_blocks_modifiedbyDownSql, map[string]*bintree{}},
	"000005_blocks_modifiedby.up.sql": {_000005_blocks_modifiedbyUpSql, map[string]*bintree{}},
	"000006_sharing_table.down.sql": {_000006_sharing_tableDownSql, map[string]*bintree{}},
	"000006_sharing_table.up.sql": {_000006_sharing_tableUpSql, map[string]*bintree{}},
	"000007_workspaces_table.down.sql": {_000007_workspaces_tableDownSql, map[string]*bintree{}},
	"000007_workspaces_table.up.sql": {_000007_workspaces_tableUpSql, map[string]*bintree{}},
	"000008_teams.down.sql": {_000008_teamsDownSql, map[string]*bintree{}},
	"000008_teams.up.sql": {_000008_teamsUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
