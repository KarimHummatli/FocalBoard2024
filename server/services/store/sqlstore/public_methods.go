// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.

// Code generated by "make generate" from the Store interface
// DO NOT EDIT

// To add a public method, create an entry in the Store interface,
// prefix it with a @withTransaction comment if you need it to be
// transactional and then add a private method in the store itself
// with db sq.BaseRunner as the first parameter before running `make
// generate`

package sqlstore

import (
	"context"

	"github.com/mattermost/focalboard/server/model"

	"github.com/mattermost/mattermost-server/v6/shared/mlog"
)

func (s *SQLStore) AddUpdateCategoryBlock(userID string, categoryID string, blockID string) error {
	return s.addUpdateCategoryBlock(s.db, userID, categoryID, blockID)

}

func (s *SQLStore) CleanUpSessions(expireTime int64) error {
	return s.cleanUpSessions(s.db, expireTime)

}

func (s *SQLStore) CreateBoardsAndBlocks(bab *model.BoardsAndBlocks, userID string) (*model.BoardsAndBlocks, error) {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return nil, txErr
	}
	result, err := s.createBoardsAndBlocks(tx, bab, userID)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "CreateBoardsAndBlocks"))
		}
		return nil, err
	}

	if err := tx.Commit(); err != nil {
		return nil, err
	}

	return result, nil

}

func (s *SQLStore) CreateBoardsAndBlocksWithAdmin(bab *model.BoardsAndBlocks, userID string) (*model.BoardsAndBlocks, []*model.BoardMember, error) {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return nil, nil, txErr
	}
	result, resultVar1, err := s.createBoardsAndBlocksWithAdmin(tx, bab, userID)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "CreateBoardsAndBlocksWithAdmin"))
		}
		return nil, nil, err
	}

	if err := tx.Commit(); err != nil {
		return nil, nil, err
	}

	return result, resultVar1, nil

}

func (s *SQLStore) CreateCategory(category model.Category) error {
	return s.createCategory(s.db, category)

}

func (s *SQLStore) CreateSession(session *model.Session) error {
	return s.createSession(s.db, session)

}

func (s *SQLStore) CreateUser(user *model.User) error {
	return s.createUser(s.db, user)

}

func (s *SQLStore) DeleteBlock(blockID string, modifiedBy string) error {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return txErr
	}
	err := s.deleteBlock(tx, blockID, modifiedBy)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "DeleteBlock"))
		}
		return err
	}

	if err := tx.Commit(); err != nil {
		return err
	}

	return nil

}

func (s *SQLStore) DeleteBoard(boardID string, userID string) error {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return txErr
	}
	err := s.deleteBoard(tx, boardID, userID)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "DeleteBoard"))
		}
		return err
	}

	if err := tx.Commit(); err != nil {
		return err
	}

	return nil

}

func (s *SQLStore) DeleteBoardsAndBlocks(dbab *model.DeleteBoardsAndBlocks, userID string) error {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return txErr
	}
	err := s.deleteBoardsAndBlocks(tx, dbab, userID)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "DeleteBoardsAndBlocks"))
		}
		return err
	}

	if err := tx.Commit(); err != nil {
		return err
	}

	return nil

}

func (s *SQLStore) DeleteCategory(categoryID string, userID string, teamID string) error {
	return s.deleteCategory(s.db, categoryID, userID, teamID)

}

func (s *SQLStore) DeleteMember(boardID string, userID string) error {
	return s.deleteMember(s.db, boardID, userID)

}

func (s *SQLStore) DeleteSession(sessionID string) error {
	return s.deleteSession(s.db, sessionID)

}

func (s *SQLStore) GetActiveUserCount(updatedSecondsAgo int64) (int, error) {
	return s.getActiveUserCount(s.db, updatedSecondsAgo)

}

func (s *SQLStore) GetAllTeams() ([]*model.Team, error) {
	return s.getAllTeams(s.db)

}

func (s *SQLStore) GetBlock(blockID string) (*model.Block, error) {
	return s.getBlock(s.db, blockID)

}

func (s *SQLStore) GetBlockCountsByType() (map[string]int64, error) {
	return s.getBlockCountsByType(s.db)

}

func (s *SQLStore) GetBlocksForBoard(boardID string) ([]model.Block, error) {
	return s.getBlocksForBoard(s.db, boardID)

}

func (s *SQLStore) GetBlocksWithParent(boardID string, parentID string) ([]model.Block, error) {
	return s.getBlocksWithParent(s.db, boardID, parentID)

}

func (s *SQLStore) GetBlocksWithParentAndType(boardID string, parentID string, blockType string) ([]model.Block, error) {
	return s.getBlocksWithParentAndType(s.db, boardID, parentID, blockType)

}

func (s *SQLStore) GetBlocksWithRootID(boardID string, rootID string) ([]model.Block, error) {
	return s.getBlocksWithRootID(s.db, boardID, rootID)

}

func (s *SQLStore) GetBlocksWithType(boardID string, blockType string) ([]model.Block, error) {
	return s.getBlocksWithType(s.db, boardID, blockType)

}

func (s *SQLStore) GetBoard(id string) (*model.Board, error) {
	return s.getBoard(s.db, id)

}

func (s *SQLStore) GetBoardsForUserAndTeam(userID string, teamID string) ([]*model.Board, error) {
	return s.getBoardsForUserAndTeam(s.db, userID, teamID)

}

func (s *SQLStore) GetCategory(id string) (*model.Category, error) {
	return s.getCategory(s.db, id)

}

func (s *SQLStore) GetMemberForBoard(boardID string, userID string) (*model.BoardMember, error) {
	return s.getMemberForBoard(s.db, boardID, userID)

}

func (s *SQLStore) GetMembersForBoard(boardID string) ([]*model.BoardMember, error) {
	return s.getMembersForBoard(s.db, boardID)

}

func (s *SQLStore) GetRegisteredUserCount() (int, error) {
	return s.getRegisteredUserCount(s.db)

}

func (s *SQLStore) GetSession(token string, expireTime int64) (*model.Session, error) {
	return s.getSession(s.db, token, expireTime)

}

func (s *SQLStore) GetSharing(rootID string) (*model.Sharing, error) {
	return s.getSharing(s.db, rootID)

}

func (s *SQLStore) GetSubTree2(boardID string, blockID string) ([]model.Block, error) {
	return s.getSubTree2(s.db, boardID, blockID)

}

func (s *SQLStore) GetSubTree3(boardID string, blockID string) ([]model.Block, error) {
	return s.getSubTree3(s.db, boardID, blockID)

}

func (s *SQLStore) GetSystemSetting(key string) (string, error) {
	return s.getSystemSetting(s.db, key)

}

func (s *SQLStore) GetSystemSettings() (map[string]string, error) {
	return s.getSystemSettings(s.db)

}

func (s *SQLStore) GetTeam(ID string) (*model.Team, error) {
	return s.getTeam(s.db, ID)

}

func (s *SQLStore) GetTeamCount() (int64, error) {
	return s.getTeamCount(s.db)

}

func (s *SQLStore) GetTeamTemplates(teamID string) ([]*model.Board, error) {
	return s.getTeamTemplates(s.db, teamID)

}

func (s *SQLStore) GetTeamsForUser(userID string) ([]*model.Team, error) {
	return s.getTeamsForUser(s.db, userID)

}

func (s *SQLStore) GetUserByEmail(email string) (*model.User, error) {
	return s.getUserByEmail(s.db, email)

}

func (s *SQLStore) GetUserByID(userID string) (*model.User, error) {
	return s.getUserByID(s.db, userID)

}

func (s *SQLStore) GetUserByUsername(username string) (*model.User, error) {
	return s.getUserByUsername(s.db, username)

}

func (s *SQLStore) GetUserCategoryBlocks(userID string, teamID string) ([]model.CategoryBlocks, error) {
	return s.getUserCategoryBlocks(s.db, userID, teamID)

}

func (s *SQLStore) GetUsersByTeam(teamID string) ([]*model.User, error) {
	return s.getUsersByTeam(s.db, teamID)

}

func (s *SQLStore) InsertBlock(block *model.Block, userID string) error {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return txErr
	}
	err := s.insertBlock(tx, block, userID)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "InsertBlock"))
		}
		return err
	}

	if err := tx.Commit(); err != nil {
		return err
	}

	return nil

}

func (s *SQLStore) InsertBoard(board *model.Board, userID string) (*model.Board, error) {
	return s.insertBoard(s.db, board, userID)

}

func (s *SQLStore) InsertBoardWithAdmin(board *model.Board, userID string) (*model.Board, *model.BoardMember, error) {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return nil, nil, txErr
	}
	result, resultVar1, err := s.insertBoardWithAdmin(tx, board, userID)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "InsertBoardWithAdmin"))
		}
		return nil, nil, err
	}

	if err := tx.Commit(); err != nil {
		return nil, nil, err
	}

	return result, resultVar1, nil

}

func (s *SQLStore) PatchBlock(blockID string, blockPatch *model.BlockPatch, userID string) error {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return txErr
	}
	err := s.patchBlock(tx, blockID, blockPatch, userID)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "PatchBlock"))
		}
		return err
	}

	if err := tx.Commit(); err != nil {
		return err
	}

	return nil

}

func (s *SQLStore) PatchBoard(boardID string, boardPatch *model.BoardPatch, userID string) (*model.Board, error) {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return nil, txErr
	}
	result, err := s.patchBoard(tx, boardID, boardPatch, userID)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "PatchBoard"))
		}
		return nil, err
	}

	if err := tx.Commit(); err != nil {
		return nil, err
	}

	return result, nil

}

func (s *SQLStore) PatchBoardsAndBlocks(pbab *model.PatchBoardsAndBlocks, userID string) (*model.BoardsAndBlocks, error) {
	tx, txErr := s.db.BeginTx(context.Background(), nil)
	if txErr != nil {
		return nil, txErr
	}
	result, err := s.patchBoardsAndBlocks(tx, pbab, userID)
	if err != nil {
		if rollbackErr := tx.Rollback(); rollbackErr != nil {
			s.logger.Error("transaction rollback error", mlog.Err(rollbackErr), mlog.String("methodName", "PatchBoardsAndBlocks"))
		}
		return nil, err
	}

	if err := tx.Commit(); err != nil {
		return nil, err
	}

	return result, nil

}

func (s *SQLStore) RefreshSession(session *model.Session) error {
	return s.refreshSession(s.db, session)

}

func (s *SQLStore) SaveMember(bm *model.BoardMember) (*model.BoardMember, error) {
	return s.saveMember(s.db, bm)

}

func (s *SQLStore) SearchBoardsForUserAndTeam(term string, userID string, teamID string) ([]*model.Board, error) {
	return s.searchBoardsForUserAndTeam(s.db, term, userID, teamID)

}

func (s *SQLStore) SetSystemSetting(key string, value string) error {
	return s.setSystemSetting(s.db, key, value)

}

func (s *SQLStore) UpdateCategory(category model.Category) error {
	return s.updateCategory(s.db, category)

}

func (s *SQLStore) UpdateSession(session *model.Session) error {
	return s.updateSession(s.db, session)

}

func (s *SQLStore) UpdateUser(user *model.User) error {
	return s.updateUser(s.db, user)

}

func (s *SQLStore) UpdateUserPassword(username string, password string) error {
	return s.updateUserPassword(s.db, username, password)

}

func (s *SQLStore) UpdateUserPasswordByID(userID string, password string) error {
	return s.updateUserPasswordByID(s.db, userID, password)

}

func (s *SQLStore) UpsertSharing(sharing model.Sharing) error {
	return s.upsertSharing(s.db, sharing)

}

func (s *SQLStore) UpsertTeamSettings(team model.Team) error {
	return s.upsertTeamSettings(s.db, team)

}

func (s *SQLStore) UpsertTeamSignupToken(team model.Team) error {
	return s.upsertTeamSignupToken(s.db, team)

}
